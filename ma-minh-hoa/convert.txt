#pragma region CONVERT
byte* ConvertIntToBytes(int value) {
	byte* result = new byte[4];
	for (int i = 0; i < 4; i++)
		result[i] = (value >> (i * 8)) & 0xff;
	return result;
}

int ConvertBytesToInt(byte* value, int length) {
	int result = 0;
	if (length > 4) length = 4;
	else if (length < 0) return -1;
	for (int i = length - 1; i >= 0; i--) {
		result <<= 8;
		result |= value[i];
	}
	return result;
}

byte* ConvertStringToBytes(string value, int* lenByte) {
	int length = value.length();
	*lenByte = length;
	byte* result = new byte[length];
	for (int i = 0; i < length; i++) {
		result[i] = value[i];
	}
	return result;
}

string ConvertBytesToString(byte* value, int length) {
	string result;
	for (int i = 0; i < length; i++) {
		result += value[i];
	}
	return result;
}

char* ConvertStringToChars(string input, char* output) {
	int length = input.length();
	char* result = new char[length];
	for (int i = 0; i < length; i++) {
		output[i] = input[i];
		result[i] = input[i];
	}
	output[length] = 0;
	result[length] = 0;
	return result;
}

char* ConvertIntToChars(char* dest, int value) {
	int index = 0;
	while (value > 0) {
		int temp = value % 10;
		value = value / 10;
		dest[index] = temp + '0';
		index++;
	}
	dest[index] = 0;
	return dest;
}

int ConvertCharsToInt(char* value) {
	int length = strlen(value);
	int result = 0;
	for (int i = length - 1; i >= 0; i--) {
		result = result * 10 + (value[i] - '0');
	}
	return result;
}
#pragma endregion